{
	"info": {
		"_postman_id": "0f2bf1f6-c8fb-429b-9e0b-76f62bf6bf9c",
		"name": "HW_3_Kolesnikovich",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var get_token = jsonData.token;\r",
							"console.log('==' + get_token)\r",
							"\r",
							"pm.environment.set(\"token\", get_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "Nastya",
							"disabled": true
						},
						{
							"key": "password",
							"value": "123456",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"\"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"  }}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"  \r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months=start_qa_salary*2\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary*2).to.eql+(jsonData.person.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months=start_qa_salary*2.9\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary*2.9).to.eql+(jsonData.person.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_1_5_months=start_qa_salary*4\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary*4).to.eql+(jsonData.person.qa_salary_after_1_5_months);\r",
							"});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 27,\r\n\"salary\": 500,\r\n\"name\": \"Nastya\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"  }}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"   \r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json();\r",
							"var reqBody = request.data\r",
							"\r",
							"var salary_1 = jsonData.salary[0];\r",
							"var salary_2 = jsonData.salary[1];\r",
							"var salary_3 = jsonData.salary[2];\r",
							"\r",
							"pm.test(\"умножения salary на коэффициент 2\", function () {\r",
							"pm.expect(salary_1*2).to.eql+(salary_2);\r",
							"});\r",
							"\r",
							"pm.test(\"умножения salary на коэффициент 2\", function () {\r",
							"pm.expect(salary_1*3).to.eql+(salary_2);\r",
							"});\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"var sal = salary_3 > salary_1;\r",
							"var sal1 = salary_3>salary_2;\r",
							"pm.test(\"2-й элемент массива salary больше 1-го и 0-го\", function () {\r",
							"    pm.expect(jsonData.sal).to.eql(jsonData.sal1);\r",
							"});\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema =  {\r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"  }}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"pm.test('Проверка структуры json в ответе', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var reqBody = request.data\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"коэффициент умножения weight для daily_food\", function() {\r",
							"    pm.expect(jsonData.daily_food/0.012).to.eql+(reqBody[\"weight\"])\r",
							"})\r",
							"\r",
							"pm.test(\"коэффициент умножения weight для daily_sleep\", function() {\r",
							"    pm.expect(jsonData.daily_sleep/2.5).to.eql+(reqBody['weight'])\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "50",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					],
					"query": [
						{
							"key": "age",
							"value": null,
							"disabled": true
						},
						{
							"key": "weight",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Статус код 200\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"  }}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Проверка структуры json в ответе', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							" });   \r",
							"//3) Проверить что значение поля name = значению переменной name из окружения\r",
							"\r",
							" var reqBody = request.data;\r",
							" var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"name\", jsonData[\"name\"]);\r",
							"var enviroment_name = pm.environment.get(\"name\");\r",
							"\r",
							"pm.test(\"Значение поля name = значению переменной name из окружения\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(enviroment_name);\r",
							"});\r",
							"\r",
							"//4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test(\"Значение поля age в ответе = в запросе значению поля age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData['age']).to.eql(reqBody['age']);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"Тесты:\r",
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"var jsonData = pm.response.json()\r",
							"var values = Object.values(jsonData)\r",
							"var values_object = values[parseInt(Math.random() *values.length)];\r",
							"        console.log(values_object);\r",
							"    \r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", values_object.Cur_ID);\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//1) получить список валют\r",
							"var jsonData = pm.response.json();\r",
							"var reqBody = request.data\r",
							"var jsonDataLenght = jsonData.length\r",
							"var token = pm.environment.get(\"token\");\r",
							"console.log(token)\r",
							"\r",
							"\r",
							"//const\r",
							"//var values = Object.values(jsonData);\r",
							"//console.log(values)\r",
							"\r",
							"//2) итерировать список валют\r",
							"\r",
							"/*values.forEach(function(item){\r",
							"console.log(jsonData[\"Cur_ID\"])\r",
							"})\r",
							"//const \r",
							"copy = [];*/\r",
							"pm.globals.set(\"variable_key\", \"variable_value\");\r",
							"var jsonData = pm.response.json();\r",
							"var reqBody = request.data\r",
							"var jsonDataLenght = jsonData.length\r",
							"var token = pm.environment.get(\"token\");\r",
							"console.log(token)\r",
							"\r",
							"for (var i = 0; i < jsonDataLenght; i++) {\r",
							"var CurID = jsonData[i].Cur_ID\r",
							"const Method = {\r",
							"        'method': 'POST',\r",
							"        'url': 'http://162.55.220.72:5005/curr_byn',\r",
							"        'body': {\r",
							"            'mode': 'formdata',\r",
							"            'formdata': [\r",
							"                {'key': 'auth_token', 'value': token},\r",
							"                {'key': 'curr_code', 'value': CurID}\r",
							"            ]\r",
							"        }\r",
							"        };\r",
							"\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.sendRequest(Method, (error, response) =>{\r",
							"        //если запрос имеет код 200\r",
							"        if(response.code==200){\r",
							"            //получаем содержимое ответа\r",
							"            var jsonData = response.json();\r",
							"            //если ответ содержит значение Cur_OfficialRate\r",
							"            if(pm.expect(jsonData).to.have.any.keys(\"Cur_OfficialRate\")){\r",
							"                // пишем в консоли содержимое ответа\r",
							"                console.log(jsonData)\r",
							"          }\r",
							"        }\r",
							"     })\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"    \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"  }}\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//1) получить список валют\r",
							"var jsonData = pm.response.json();\r",
							"var reqBody = request.data\r",
							"var jsonDataLenght = jsonData.length\r",
							"var token = pm.environment.get(\"token\");\r",
							"console.log(token)\r",
							"\r",
							"\r",
							"//const\r",
							"//var values = Object.values(jsonData);\r",
							"//console.log(values)\r",
							"\r",
							"//2) итерировать список валют\r",
							"\r",
							"/*values.forEach(function(item){\r",
							"console.log(jsonData[\"Cur_ID\"])\r",
							"})\r",
							"//const \r",
							"copy = [];*/\r",
							"\r",
							"for (var i = 0; i < jsonDataLenght; i++) {\r",
							"var CurID = jsonData[i].Cur_ID\r",
							"const Method = {\r",
							"        'method': 'POST',\r",
							"        'url': 'http://162.55.220.72:5005/curr_byn',\r",
							"        'body': {\r",
							"            'mode': 'formdata',\r",
							"            'formdata': [\r",
							"                {'key': 'auth_token', 'value': token},\r",
							"                {'key': 'curr_code', 'value': CurID}\r",
							"            ]\r",
							"        }\r",
							"        };\r",
							"\r",
							"        pm.sendRequest(Method, (error, response) =>{\r",
							"        //если запрос имеет код 200\r",
							"        if(response.code==200){\r",
							"            //получаем содержимое ответа\r",
							"            var jsonData = response.json();\r",
							"            //если ответ содержит значение Cur_OfficialRate\r",
							"            if(pm.expect(jsonData).to.have.any.keys(\"Cur_OfficialRate\")){\r",
							"                // пишем в консоли содержимое ответа\r",
							"                console.log(jsonData)\r",
							"          };\r",
							"        }\r",
							"    });\r",
							"\r",
							"\r",
							"    //copy.push(values[i])\r",
							"\r",
							"\r",
							"//values.forEach(function(){\r",
							"  //copy.push('Cur_ID')\r",
							"//})\r",
							"\r",
							"//function logArrayElements() {\r",
							"  //console.log('a[' + Cur_ID + '] = ' + element); \r",
							"//}\r",
							"\r",
							"//3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"\r",
							"//4) если возвращается 500 код, переходим к следующей итреации\r",
							"//5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"//6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"/*{\r",
							"    \"Cur_Abbreviation\": str\r",
							"    \"Cur_ID\": int,\r",
							"    \"Cur_Name\": str,\r",
							"    \"Cur_OfficialRate\": float,\r",
							"    \"Cur_Scale\": int,\r",
							"    \"Date\": str\r",
							"}*/\r",
							"//pm.test(\"Cur_OfficialRate\", function () {\r",
							"    //pm.expect(jsonData.Cur_OfficialRate).to.eql+([\"Cur_OfficialRate\"]);\r",
							"//});\r",
							"\r",
							"//while (jsonData.Cur_OfficialRate == true) {\r",
							"    //console.log(jsonData); \r",
							"//}\r",
							"  \r",
							"//7) переходим к следующей итерации\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "501",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}