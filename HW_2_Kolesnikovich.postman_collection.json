{
	"info": {
		"_postman_id": "12621940-ccb0-411d-b2f3-87956878c0b4",
		"name": "HW_2_Kolesnikovich",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Проверить, что в body приходит правильный string.*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name в ответе=name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Nastya\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"age в ответе=age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"salary в ответе=salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var reqBody = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"response_name=request_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"response_age=request_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqBody.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"response_salary=request_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(Number(reqBody.salary));\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							" \r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"var salary_ = +(reqBody.salary);\r",
							"\r",
							"pm.test(\"u_salary_1_5_year=salary*4\", function () {\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(salary_*4);\r",
							"});\r",
							"console.log(salary_)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Спарсить response body в json.*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							" var jsonData = pm.response.json();\r",
							"\r",
							" //4. Спарсить request.\r",
							" var reqData = pm.request.url.query.toObject();\r",
							" console.log(reqData)\r",
							"\r",
							" //5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_respons=name_request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_respons=age_request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_respons=salary_request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql+(reqData.salary);\r",
							"})\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"у параметра dog есть параметры name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"})\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"})\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_nameLuky\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_age_4\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nastya&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nastya"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Спарсить response body в json.*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var reqBody = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_resp=name_req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age_resp=age_req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql+(reqBody.age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqBody.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"null property\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql+(reqBody.salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"1Element_salary=1*2_salary\", function () { \r",
							"    pm.expect(jsonData.salary[1]).to.eql+(reqBody.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2Element_salary=1*3_salary\", function () { \r",
							"    pm.expect(jsonData.salary[2]).to.eql+(reqBody.salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age)\r",
							"//20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", jsonData.salary[0])\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//var salary = jsonData\r",
							"\r",
							"for(var i = 0; i < jsonData.salary.lenght; i++){\r",
							"    console.log('Salary_', + i +\": \" +jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nastya&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nastya"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Вставить параметр salary из окружения в request\r",
							"2. Вставить параметр age из окружения в age\r",
							"3. Вставить параметр name из окружения в name*/\r",
							"\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"//7. Спарсить request.\r",
							"\r",
							"var reqBody = request.data\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json resp имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function()\r",
							"{\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_3.5_years', function() {\r",
							"pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", function(){\r",
							"pm.expect(jsonData).to.haveOwnProperty('person')\r",
							"})\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('параметр start_qa_salary = salary из request', function(){\r",
							"pm.expect(jsonData.start_qa_salary).to.eql+(reqBody.salary)\r",
							"})\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_6_months=salary*2', function(){\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqBody.salary*2)\r",
							"})\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_12_months = salary*2.7', function() {\r",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqBody.salary*2.7)\r",
							"})\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_1.5_year = salary*3.3', function() {\r",
							"pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqBody.salary*3.3)\r",
							"})\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_3.5_years=salary*3.8', function() {\r",
							"pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql+(reqBody.salary*3.5)\r",
							"})\r",
							"19. //Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql+(reqBody.salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"в параметре person 1-й элемент из u_name=salary из request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql+(reqBody.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years=salary*4.2 из request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql+(reqBody.salary*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (var i of jsonData.person.u_name) {\r",
							"    console.log('Person_' + i)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}